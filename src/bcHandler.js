const { randomDelay } = require('./utils');
const SurveyProtectionService = require('./services/surveyProtectionService');

class BcHandler {
    constructor(page, userConfig) {
        this.page = page;
        this.userConfig = userConfig;
        this.surveyProtection = null;
    }

    async execute() {
        console.log('=== T·∫†O T√ÄI KHO·∫¢N BC TH∆Ø·ªúNG (QUY TR√åNH CHU·∫®N) === [bcHandler.js:10]');

        try {
            // üõ°Ô∏è Kh·ªüi ƒë·ªông Survey Protection cho bcHandler
            console.log('üõ°Ô∏è Kh·ªüi ƒë·ªông Survey Protection cho BC Handler...');
            this.surveyProtection = await SurveyProtectionService.createGlobalProtection(this.page);

            // L∆∞·ª£t 1: ch·ªâ "T·∫°o m·ªõi" v√† ƒëi·ªÅn form
            console.log('B·∫ÆT ƒê·∫¶U L∆Ø·ª¢T 1 [bcHandler.js:11]');
            await this.createBcAccountFirst();
            // L∆∞·ª£t 2 v√† 3: "Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o" r·ªìi ƒëi·ªÅn form
            for (let loop = 2; loop <= 3; loop++) {
                console.log(`\n--- B·∫ÆT ƒê·∫¶U L·∫¶N ${loop} --- [bcHandler.js:15]`);
                await this.createBcAccountLoop(loop);
            }

        } catch (error) {
            console.error('L·ªói trong BC Handler:', error.message);
            throw error;
        } finally {
            // üõ°Ô∏è D·ª´ng Survey Protection
            if (this.surveyProtection) {
                this.surveyProtection.stopProtection();
                this.surveyProtection = null;
                console.log('‚úÖ ƒê√£ d·ª´ng Survey Protection (BC Handler)');
            }
        }
    }

    // L∆∞·ª£t ƒë·∫ßu ti√™n: ch·ªâ click "T·∫°o m·ªõi" v√† ƒëi·ªÅn form
    async createBcAccountFirst() {
        try {
            console.log('B∆∞·ªõc 1: Click "T·∫°o m·ªõi" [bcHandler.js:24]');
            await this.clickButtonByText('T·∫°o m·ªõi', 'bc-okee-btn');
            await randomDelay(2000, 4000);

            console.log('B∆∞·ªõc 2: Click "Ti·∫øp" (button l·ªõn) [bcHandler.js:28]');
            await this.clickButtonByText('Ti·∫øp', 'bc-okee-btn-size-lg');
            await randomDelay(3000, 5000);

            console.log('B∆∞·ªõc 3: Ch·ªù popup form, ƒëi·ªÅn t√™n t√†i kho·∫£n v√† ch·ªçn m√∫i gi·ªù [bcHandler.js:32]');
            await this.page.waitForSelector('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]', { timeout: 15000 });
            await randomDelay(1000, 2000);
            const accountName = this.userConfig.accountName || `BC_${Math.random().toString(36).substring(2, 8)}_1`;
            await this.page.type('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]', accountName);
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn t√™n t√†i kho·∫£n:', accountName, '[bcHandler.js:36]');
            await randomDelay(500, 1000);

            console.log('B∆∞·ªõc 4: Ch·ªçn m√∫i gi·ªù [bcHandler.js:40]');
            await this.page.click('input[placeholder="Ch·ªçn m√∫i gi·ªù"]');
            await randomDelay(700, 1200);
            await this.page.evaluate(() => {
                const listItems = [...document.querySelectorAll('.vi-select-dropdown__item span')];
                const target = listItems.find(el => el.innerText.includes('UTC+07:00') && el.innerText.includes('H·ªì Ch√≠ Minh'));
                if (target) target.click();
            });
            console.log('‚úÖ ƒê√£ ch·ªçn m√∫i gi·ªù H·ªì Ch√≠ Minh [bcHandler.js:47]');
            await randomDelay(1000, 2000);

            console.log('B∆∞·ªõc 5: Click "Ti·∫øp" (form popup) [bcHandler.js:51]');
            await this.clickButtonByText('Ti·∫øp', 'vi-button--primary');
            console.log('‚úÖ ƒê√£ click "Ti·∫øp" (form popup) [bcHandler.js:52]');
            await randomDelay(15000, 20000);


            // l·ªói ·ªü ƒë√¢y
            // B·ªï sung: Click v√†o checkbox tr∆∞·ªõc khi click "Ti·∫øp" l·∫ßn 2
            console.log('B·ªï sung: Click v√†o checkbox [bcHandler.js:55.1]');
            await this.page.evaluate(() => {
                const xpath = "(//label[@role='checkbox' and contains(@class, 'vi-checkbox')])[1]";
                const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                const checkbox = result.singleNodeValue;
                if (checkbox && checkbox.offsetParent !== null) {
                    checkbox.click();
                }
            });

            console.log('B∆∞·ªõc 6: Click "Ti·∫øp" l·∫ßn 2 [bcHandler.js:56]');
            await this.clickButtonByText('Ti·∫øp', 'vi-button--primary');
            console.log('‚úÖ ƒê√£ click "Ti·∫øp" l·∫ßn 2 [bcHandler.js:57]');
            await randomDelay(15000, 20000);

            console.log('B∆∞·ªõc 7: Click "G·ª≠i" [bcHandler.js:61]');
            await this.clickButtonByText('G·ª≠i', 'vi-button--primary');
            console.log('‚úÖ ƒê√£ click "G·ª≠i" [bcHandler.js:62]');
            await randomDelay(20000, 22000);
        } catch (error) {
            console.error('L·ªói khi t·∫°o t√†i kho·∫£n BC th∆∞·ªùng (l∆∞·ª£t 1):', error.message, '[bcHandler.js:65]');
            // KH√îNG ƒë√≥ng browser ·ªü ƒë√¢y
            throw error;
        }
    }

    // L∆∞·ª£t 2, 3: b·∫Øt ƒë·∫ßu t·ª´ "Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o"
    async createBcAccountLoop(loop) {
        try {
            console.log(`B∆∞·ªõc 1: Click "Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o" [bcHandler.js:74]`);
            await this.clickButtonByText('Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o', 'bc-okee-btn');
            await randomDelay(15000, 20000);

            console.log('B∆∞·ªõc 2: Ch·ªù popup, click <p> c√≥ text "T·∫°o m·ªõi" [bcHandler.js:78]');
            await this.page.evaluate(() => {
                const p = Array.from(document.querySelectorAll('p.text-14.font-medium.text-neutral-highOnSurface')).find(e => e.textContent.trim() === 'T·∫°o m·ªõi');
                if (p) p.click();
            });
            console.log('‚úÖ ƒê√£ click <p> T·∫°o m·ªõi trong popup [bcHandler.js:82]');
            await randomDelay(2000, 4000);

            console.log('B∆∞·ªõc 3: Click "Ti·∫øp" (button l·ªõn) [bcHandler.js:86]');
            await this.clickButtonByText('Ti·∫øp', 'bc-okee-btn-size-lg');
            await randomDelay(3000, 5000);

            console.log('B∆∞·ªõc 4: Ch·ªù popup form, ƒëi·ªÅn t√™n t√†i kho·∫£n v√† ch·ªçn m√∫i gi·ªù [bcHandler.js:90]');
            await this.page.waitForSelector('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]', { timeout: 15000 });
            await randomDelay(1000, 2000);
            const accountName = this.userConfig.accountName || `BC_${Math.random().toString(36).substring(2, 8)}_${loop}`;
            await this.page.type('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]', accountName);
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn t√™n t√†i kho·∫£n:', accountName, `[bcHandler.js:94]`);
            await randomDelay(500, 1000);

            console.log('B∆∞·ªõc 5: Ch·ªçn m√∫i gi·ªù [bcHandler.js:98]');
            await this.page.click('input[placeholder="Ch·ªçn m√∫i gi·ªù"]');
            await randomDelay(700, 1200);
            await this.page.evaluate(() => {
                const listItems = [...document.querySelectorAll('.vi-select-dropdown__item span')];
                const target = listItems.find(el => el.innerText.includes('UTC+07:00') && el.innerText.includes('H·ªì Ch√≠ Minh'));
                if (target) target.click();
            });
            console.log('‚úÖ ƒê√£ ch·ªçn m√∫i gi·ªù H·ªì Ch√≠ Minh [bcHandler.js:105]');
            await randomDelay(1000, 2000);

            console.log('B∆∞·ªõc 6: Click "Ti·∫øp" (form popup) [bcHandler.js:109]');
            await this.clickButtonByText('Ti·∫øp', 'vi-button--primary');
            console.log('‚úÖ ƒê√£ click "Ti·∫øp" (form popup) [bcHandler.js:110]');
            await randomDelay(5000, 7000);
            // 
            console.log('B·ªï sung: Click v√†o checkbox [bcHandler.js:127]');
            await this.page.evaluate(() => {
                const xpath = "(//label[@role='checkbox' and contains(@class, 'vi-checkbox')])[1]";
                const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                const checkbox = result.singleNodeValue;
                if (checkbox && checkbox.offsetParent !== null) {
                    checkbox.click();
                }
            });
            console.log('B∆∞·ªõc 7: Click "Ti·∫øp" l·∫ßn 2 [bcHandler.js:114]');
            await this.clickButtonByText('Ti·∫øp', 'vi-button--primary');
            console.log('‚úÖ ƒê√£ click "Ti·∫øp" l·∫ßn 2 [bcHandler.js:115]');
            await randomDelay(15000, 20000);

            console.log('B∆∞·ªõc 8: Click "G·ª≠i" [bcHandler.js:119]');
            await this.clickButtonByText('G·ª≠i', 'vi-button--primary');
            console.log('‚úÖ ƒê√£ click "G·ª≠i" [bcHandler.js:120]');
            await randomDelay(20000, 22000);
        } catch (error) {
            console.error(`L·ªói khi t·∫°o t√†i kho·∫£n BC th∆∞·ªùng (l∆∞·ª£t ${loop}):`, error.message, '[bcHandler.js:123]');
            // KH√îNG ƒë√≥ng browser ·ªü ƒë√¢y
            throw error;
        }
    }

    // Helper: Click button theo text v√† class
    async clickButtonByText(text, classPart) {
        if (text.trim() === 'Ti·∫øp' && classPart === 'vi-button--primary') {
            // D√πng evaluate ƒë·ªÉ click button cu·ªëi c√πng c√≥ span text 'Ti·∫øp'
            const clicked = await this.page.evaluate(() => {
                const xpath = "(//button[span[normalize-space(text())='Ti·∫øp']])[last()]";
                const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                const button = result.singleNodeValue;
                if (button && !button.disabled && button.offsetParent !== null) {
                    button.click();
                    return true;
                }
                return false;
            });
            if (clicked) {
                console.log(`‚úÖ ƒê√£ click button (XPath): ${text}`);
            } else {
                throw new Error("Kh√¥ng t√¨m th·∫•y button 'Ti·∫øp' (XPath)");
            }
        } else {
            await this.page.evaluate((btnText, classPart) => {
                const btns = Array.from(document.querySelectorAll('button'));
                const btn = btns.find(b => b.textContent.trim() === btnText && b.className.includes(classPart));
                if (btn && !btn.disabled && btn.offsetParent !== null) btn.click();
            }, text, classPart);
            console.log(`‚úÖ ƒê√£ click button: ${text}`);
        }
    }

    // Helper: Click popup text (v√≠ d·ª• <p> ho·∫∑c <span> c√≥ text)
    async clickPopupText(text) {
        await this.page.evaluate((targetText) => {
            const el = Array.from(document.querySelectorAll('p, span, div')).find(e => e.textContent.trim() === targetText);
            if (el) el.click();
        }, text);
        console.log(`‚úÖ ƒê√£ click popup text: ${text}`);
    }
}

module.exports = BcHandler;