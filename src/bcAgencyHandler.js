const SurveyProtectionService = require('./services/surveyProtectionService');

class BcAgencyHandler {
    constructor(page, userConfig) {
        this.page = page;
        this.userConfig = userConfig;
        this.surveyProtection = null;
    }

    async execute() {
        console.log('=== T·∫†O T√ÄI KHO·∫¢N BC AGENCY (FLOW CHU·∫®N) === [bcAgencyHandler.js:8]');

        try {
            // üõ°Ô∏è Kh·ªüi ƒë·ªông Survey Protection cho bcAgencyHandler
            console.log('üõ°Ô∏è Kh·ªüi ƒë·ªông Survey Protection cho BC Agency Handler...');
            this.surveyProtection = await SurveyProtectionService.createGlobalProtection(this.page);

            for (let loop = 1; loop <= 3; loop++) {
                console.log(`\n--- B·∫ÆT ƒê·∫¶U L·∫¶N ${loop} --- [bcAgencyHandler.js:10]`);
                if (loop === 1) {
                    // L·∫ßn ƒë·∫ßu: Click "T·∫°o m·ªõi"
                    console.log('B∆∞·ªõc 1: Click "T·∫°o m·ªõi" [bcAgencyHandler.js:13]');
                    await this.clickElement("//button[normalize-space(text())='T·∫°o m·ªõi']");
                    console.log('‚úÖ ƒê√£ click button T·∫°o m·ªõi [bcAgencyHandler.js:14]');
                    await this.delay(1500, 2500);
                } else {
                    // L·∫ßn 2, 3: Click Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o, T·∫°o m·ªõi, Ti·∫øp x√°c nh·∫≠n
                    console.log('B∆∞·ªõc 1: Ch·ªù v√† click Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o [bcAgencyHandler.js:19]');
                    await this.delay(10000, 16000);
                    await this.clickElement("//button[normalize-space(text())='Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o']");
                    console.log('‚úÖ ƒê√£ click Th√™m t√†i kho·∫£n nh√† qu·∫£ng c√°o [bcAgencyHandler.js:20]');
                    await this.delay(2000, 4000);
                    console.log('B∆∞·ªõc 2: Click T·∫°o m·ªõi [bcAgencyHandler.js:22]');
                    await this.clickElement("//p[normalize-space(text())='T·∫°o m·ªõi']");
                    console.log('‚úÖ ƒê√£ click T·∫°o m·ªõi [bcAgencyHandler.js:23]');
                    await this.delay(1000, 2000);
                    console.log('B∆∞·ªõc 3: Click Ti·∫øp x√°c nh·∫≠n [bcAgencyHandler.js:25]');
                    await this.clickElement("//button[normalize-space(text())='Ti·∫øp' and contains(@class, 'bc-okee-confirm-ok')]");
                    console.log('‚úÖ ƒê√£ click Ti·∫øp x√°c nh·∫≠n [bcAgencyHandler.js:26]');
                    await this.delay(2000, 3000);
                }
                await this.createAgencyAccount(loop);
            }

        } catch (error) {
            console.error('L·ªói trong BC Agency Handler:', error.message);
            throw error;
        } finally {
            // üõ°Ô∏è D·ª´ng Survey Protection
            if (this.surveyProtection) {
                this.surveyProtection.stopProtection();
                this.surveyProtection = null;
                console.log('‚úÖ ƒê√£ d·ª´ng Survey Protection (BC Agency Handler)');
            }
        }
    }

    async createAgencyAccount(loop) {
        try {
            // 1. Ch·ªçn n∆°i ƒëƒÉng k√≠
            console.log('B∆∞·ªõc 1: Ch·ªçn n∆°i ƒëƒÉng k√≠ [bcAgencyHandler.js:36]');
            const countryToSelect = this.userConfig.companyCountry && this.userConfig.companyCountry.length > 0 ? this.userConfig.companyCountry : 'Vi·ªát Nam';
            await this.page.waitForSelector('input[placeholder*="n∆°i ƒëƒÉng k√≠"]', {
                visible: true,
                timeout: 15000
            });
            await this.page.click('input[placeholder*="n∆°i ƒëƒÉng k√≠"]');
            await this.delay(500, 800);

            await this.page.evaluate((country) => {
                const items = [...document.querySelectorAll('.vi-select-dropdown__item span')];
                const target = items.find(el => el.innerText.trim() === country);
                if (target) target.click();
            }, countryToSelect);
            console.log('‚úÖ ƒê√£ ch·ªçn n∆°i ƒëƒÉng k√≠:', countryToSelect, '[bcAgencyHandler.js:49]');
            await this.delay(1000, 1500);

            // 2. ƒêi·ªÅn t√™n c√¥ng ty
            console.log('B∆∞·ªõc 2: ƒêi·ªÅn t√™n c√¥ng ty [bcAgencyHandler.js:52]');
            const companyName = this.userConfig.companyName && this.userConfig.companyName.length > 0 ?
                this.userConfig.companyName :
                `Cty_${Math.random().toString(36).substring(2, 8)}`;
            await this.page.waitForSelector('input[placeholder="T√¨m ki·∫øm theo t√™n c√¥ng ty"]', {
                visible: true,
                timeout: 10000
            });
            await this.page.click('input[placeholder="T√¨m ki·∫øm theo t√™n c√¥ng ty"]');
            await this.page.keyboard.down('Control');
            await this.page.keyboard.press('KeyA');
            await this.page.keyboard.up('Control');
            await this.page.type('input[placeholder="T√¨m ki·∫øm theo t√™n c√¥ng ty"]', companyName);
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn t√™n c√¥ng ty:', companyName, '[bcAgencyHandler.js:65]');
            await this.delay(700, 1200);

            // 3. ƒêi·ªÅn trang web c√¥ng ty
            console.log('B∆∞·ªõc 3: ƒêi·ªÅn website c√¥ng ty [bcAgencyHandler.js:68]');
            const website = this.userConfig.companyWebsite && this.userConfig.companyWebsite.length > 0 ?
                this.userConfig.companyWebsite :
                `https://company${Math.floor(Math.random()*10000)}.com`;
            await this.page.waitForSelector('input[placeholder*="nhi·ªÅu URL"]', {
                visible: true,
                timeout: 10000
            });
            await this.page.click('input[placeholder*="nhi·ªÅu URL"]');
            await this.page.keyboard.down('Control');
            await this.page.keyboard.press('KeyA');
            await this.page.keyboard.up('Control');
            await this.page.type('input[placeholder*="nhi·ªÅu URL"]', website);
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn website c√¥ng ty:', website, '[bcAgencyHandler.js:81]');
            // Trigger blur sau khi nh·∫≠p website
            await this.page.evaluate(() => {
                const input = document.querySelector('input[placeholder*="nhi·ªÅu URL"]');
                if (input) input.blur();
            });
            await this.delay(2500, 4500);

            // 4. Click Ti·∫øp (b∆∞·ªõc 1)
            console.log('B∆∞·ªõc 4: Click Ti·∫øp (b∆∞·ªõc 1) [bcAgencyHandler.js:90]');
            await this.clickElement("(//button[span[normalize-space(text())='Ti·∫øp']])[last()]");
            await this.delay(2500, 4500);
            console.log('‚úÖ ƒê√£ click button Ti·∫øp (b∆∞·ªõc 1, ƒë√∫ng XPath) [bcAgencyHandler.js:97]');
            await this.delay(2000, 3000);

            // 5. Ch·ªçn ng√†nh
            console.log('B∆∞·ªõc 5: Ch·ªçn ng√†nh [bcAgencyHandler.js:99]');
            await this.page.waitForSelector('input[placeholder="Ch·ªçn m·ªôt ng√†nh"]', {
                visible: true,
                timeout: 15000
            });
            await this.page.click('input[placeholder="Ch·ªçn m·ªôt ng√†nh"]');
            await this.delay(500, 800);

            await this.page.evaluate(() => {
                // Click m·ªü dropdown ng√†nh
                const input = document.querySelector('input[placeholder*="ng√†nh"]');
                if (!input) {
                    console.error('‚ùå Kh√¥ng t√¨m th·∫•y √¥ ng√†nh');
                    return;
                }
                input.click();
                setTimeout(() => {
                    const menu1 = document.querySelector('.vi-cascader-menu');
                    if (!menu1) {
                        console.error('‚ùå Kh√¥ng t√¨m th·∫•y menu c·∫•p 1');
                        return;
                    }
                    const item1 = [...menu1.querySelectorAll('li')].find(el => el.innerText.trim() === 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠');
                    if (!item1) {
                        console.error('‚ùå Kh√¥ng t√¨m th·∫•y "Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠"');
                        return;
                    }
                    item1.dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));
                    setTimeout(() => {
                        const menus = document.querySelectorAll('.vi-cascader-menu');
                        if (menus.length < 2) {
                            console.error('‚è∞ Timeout: Kh√¥ng th·∫•y menu c·∫•p 2');
                            return;
                        }
                        const menu2 = menus[1];
                        const item2 = [...menu2.querySelectorAll('li')].find(el => el.innerText.trim() === 'Thi·∫øt b·ªã ƒëi·ªán');
                        if (!item2) {
                            console.error('‚ùå Kh√¥ng t√¨m th·∫•y "Thi·∫øt b·ªã ƒëi·ªán"');
                            return;
                        }
                        item2.click();
                        console.log('‚úÖ ƒê√£ ch·ªçn Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ ‚Üí Thi·∫øt b·ªã ƒëi·ªán');
                    }, 500);
                }, 300);
            });
            await this.delay(1000, 1500);

            // 6. ƒêi·ªÅn T√™n t√†i kho·∫£n random
            console.log('B∆∞·ªõc 6: ƒêi·ªÅn t√™n t√†i kho·∫£n qu·∫£ng c√°o [bcAgencyHandler.js:147]');
            const accountName = `Agency_${Math.random().toString(36).substring(2, 8)}`;
            await this.page.waitForSelector('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]', {
                visible: true,
                timeout: 10000
            });
            await this.page.click('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]');
            await this.page.keyboard.down('Control');
            await this.page.keyboard.press('KeyA');
            await this.page.keyboard.up('Control');
            await this.page.type('input[placeholder="Nh·∫≠p t√™n t√†i kho·∫£n qu·∫£ng c√°o"]', accountName);
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn t√™n t√†i kho·∫£n:', accountName, '[bcAgencyHandler.js:157]');
            await this.delay(700, 1200);

            // 7. Ch·ªçn M√∫i gi·ªù (UTC+07:00 H·ªì Ch√≠ Minh)
            console.log('B∆∞·ªõc 7: Ch·ªçn m√∫i gi·ªù [bcAgencyHandler.js:161]');
            await this.page.waitForSelector('input[placeholder="Ch·ªçn m√∫i gi·ªù"]', {
                visible: true,
                timeout: 10000
            });
            await this.page.click('input[placeholder="Ch·ªçn m√∫i gi·ªù"]');
            await this.delay(700, 1200);

            await this.page.evaluate(() => {
                const listItems = [...document.querySelectorAll('.vi-select-dropdown__item span')];
                const target = listItems.find(el => el.innerText.includes('UTC+07:00') && el.innerText.includes('H·ªì Ch√≠ Minh'));
                if (target) target.click();
            });
            console.log('‚úÖ ƒê√£ ch·ªçn m√∫i gi·ªù H·ªì Ch√≠ Minh [bcAgencyHandler.js:173]');
            await this.delay(1000, 1500);

            // 7.5. Ch·ªçn Bang/T·ªânh n·∫øu ƒëƒÉng k√Ω ·ªü Hoa K·ª≥ (M·ªπ)
            console.log('üîÑ [bcAgencyHandler] Calling handleUSStateSelection...');
            console.log(`üîÑ [bcAgencyHandler] Country selected: "${countryToSelect}"`);
            await this.handleUSStateSelection(countryToSelect);
            console.log('‚úÖ [bcAgencyHandler] handleUSStateSelection completed');

            // 8. ƒêi·ªÅn ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë (optional)
            console.log('B∆∞·ªõc 8: ƒêi·ªÅn ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë [bcAgencyHandler.js:177]');
            const street = `So ${Math.floor(Math.random()*1000)} Nguyen Van Linh`;
            const streetInputFilled = await this.fillInputIfExists(
                'input[placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë c·ªßa b·∫°n"]',
                street,
                'ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë'
            );

            // 9. ƒêi·ªÅn postal code (optional)
            console.log('B∆∞·ªõc 9: ƒêi·ªÅn postal code [bcAgencyHandler.js:191]');
            const postal = `${Math.floor(10000 + Math.random()*90000)}`;
            const postalInputFilled = await this.fillInputIfExists(
                'input[placeholder="Enter postal code"]',
                postal,
                'postal code'
            );

            // 10. Check v√† click button Ti·∫øp n·∫øu c√≥ (sau khi ƒëi·ªÅn th√¥ng tin)
            console.log('B∆∞·ªõc 10: Ki·ªÉm tra button Ti·∫øp sau khi ƒëi·ªÅn th√¥ng tin [bcAgencyHandler.js:202]');
            const nextButtonClicked = await this.clickElementIfExists(
                "(//button[span[normalize-space(text())='Ti·∫øp']])[last()]",
                'button Ti·∫øp sau b∆∞·ªõc 9'
            );

            if (nextButtonClicked) {
                await this.delay(5000, 10000);

                // 10.1. Ki·ªÉm tra v√† x·ª≠ l√Ω c√°c input b·ªï sung sau khi click Ti·∫øp
                console.log('B∆∞·ªõc 10.1: Ki·ªÉm tra c√°c input b·ªï sung sau khi click Ti·∫øp [bcAgencyHandler.js:208]');

                // Ki·ªÉm tra input ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë
                const additionalStreet = `So ${Math.floor(Math.random()*1000)} Le Loi Street`;
                const additionalStreetFilled = await this.fillInputIfExists(
                    '//input[@placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë c·ªßa b·∫°n"]',
                    additionalStreet,
                    'ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë b·ªï sung',
                    true // s·ª≠ d·ª•ng XPath
                );

                // Ki·ªÉm tra input postal code
                const additionalPostal = `${Math.floor(10000 + Math.random()*90000)}`;
                const additionalPostalFilled = await this.fillInputIfExists(
                    '//input[@placeholder="Enter postal code"]',
                    additionalPostal,
                    'postal code b·ªï sung',
                    true // s·ª≠ d·ª•ng XPath
                );

                // Ki·ªÉm tra v√† click checkbox n·∫øu c√≥
                const checkboxClicked = await this.clickElementIfExists(
                    "//label[@class='vi-checkbox']",
                    'checkbox vi-checkbox'
                );

                // Ki·ªÉm tra button Ti·∫øp ti·∫øp theo
                const additionalNextButtonClicked = await this.clickElementIfExists(
                    "(//button[span[normalize-space(text())='Ti·∫øp']])[last()]",
                    'button Ti·∫øp b·ªï sung'
                );

                if (additionalNextButtonClicked) {
                    console.log('‚úÖ ƒê√£ click button Ti·∫øp b·ªï sung, ch·ªù 5-10s tr∆∞·ªõc khi g·ª≠i');
                    await this.delay(5000, 10000);
                }
            }

            // 11. Click G·ª≠i (b∆∞·ªõc cu·ªëi)
            console.log('B∆∞·ªõc 11: Click G·ª≠i (b∆∞·ªõc cu·ªëi) [bcAgencyHandler.js:240]');
            await this.clickElement("(//div[@role='dialog_footer']//button[.//span[normalize-space(text())='G·ª≠i']])[3]");
            console.log('‚úÖ ƒê√£ click button G·ª≠i (b∆∞·ªõc cu·ªëi) [bcAgencyHandler.js:241]');
            await this.delay(3000, 5000);

        } catch (error) {
            console.error('L·ªói khi t·∫°o t√†i kho·∫£n BC agency:', error.message, '[bcAgencyHandler.js:245]');
            throw error;
        }
    }

    /**
     * ƒêi·ªÅn input n·∫øu element t·ªìn t·∫°i v√† hi·ªÉn th·ªã
     * @param {string} selector - CSS selector ho·∫∑c XPath
     * @param {string} value - Gi√° tr·ªã c·∫ßn ƒëi·ªÅn
     * @param {string} fieldName - T√™n field ƒë·ªÉ log
     * @param {boolean} isXPath - true n·∫øu selector l√† XPath
     * @returns {Promise<boolean>} - true n·∫øu ƒë√£ ƒëi·ªÅn th√†nh c√¥ng
     */
    async fillInputIfExists(selector, value, fieldName, isXPath = false) {
        try {
            let element;

            if (isXPath) {
                // S·ª≠ d·ª•ng XPath
                const elementExists = await this.page.evaluate((xpath) => {
                    const result = document.evaluate(
                        xpath,
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    );
                    const element = result.singleNodeValue;

                    if (!element) return false;

                    // Ki·ªÉm tra element c√≥ hi·ªÉn th·ªã kh√¥ng
                    const style = window.getComputedStyle(element);
                    return (
                        element.offsetParent !== null &&
                        style.visibility !== 'hidden' &&
                        style.display !== 'none' &&
                        style.opacity !== '0'
                    );
                }, selector);

                if (!elementExists) {
                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y √¥ ${fieldName}, b·ªè qua b∆∞·ªõc n√†y`);
                    return false;
                }

                // ƒêi·ªÅn th√¥ng tin b·∫±ng XPath
                await this.page.evaluate((xpath, value) => {
                    const result = document.evaluate(
                        xpath,
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    );
                    const element = result.singleNodeValue;

                    if (element) {
                        element.focus();
                        element.select();
                        element.value = value;
                        element.dispatchEvent(new Event('input', { bubbles: true }));
                        element.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                }, selector, value);

            } else {
                // S·ª≠ d·ª•ng CSS selector
                element = await this.page.$(selector);
                if (!element) {
                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y √¥ ${fieldName}, b·ªè qua b∆∞·ªõc n√†y`);
                    return false;
                }

                const isVisible = await this.page.evaluate(el => {
                    if (!el || !(el instanceof HTMLElement)) return false;
                    const style = window.getComputedStyle(el);
                    return (
                        el.offsetParent !== null &&
                        style.visibility !== 'hidden' &&
                        style.display !== 'none' &&
                        style.opacity !== '0'
                    );
                }, element);

                if (!isVisible) {
                    console.log(`‚ö†Ô∏è √î ${fieldName} kh√¥ng hi·ªÉn th·ªã, b·ªè qua b∆∞·ªõc n√†y`);
                    return false;
                }

                // ƒêi·ªÅn th√¥ng tin
                await element.click({ delay: 100 });
                await this.page.keyboard.down('Control');
                await this.page.keyboard.press('KeyA');
                await this.page.keyboard.up('Control');
                await element.type(value);
            }

            console.log(`‚úÖ ƒê√£ ƒëi·ªÅn ${fieldName}:`, value);
            await this.delay(700, 1200);
            return true;

        } catch (error) {
            console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëi·ªÅn ${fieldName}, b·ªè qua b∆∞·ªõc n√†y:`, error.message);
            return false;
        }
    }

    /**
     * Click element n·∫øu t·ªìn t·∫°i v√† hi·ªÉn th·ªã
     * @param {string} xpath - XPath c·ªßa element
     * @param {string} elementName - T√™n element ƒë·ªÉ log
     * @returns {Promise<boolean>} - true n·∫øu click th√†nh c√¥ng
     */
    async clickElementIfExists(xpath, elementName) {
        try {
            // S·ª≠ d·ª•ng page.evaluate ƒë·ªÉ ki·ªÉm tra element
            const elementExists = await this.page.evaluate((xpath) => {
                const result = document.evaluate(
                    xpath,
                    document,
                    null,
                    XPathResult.FIRST_ORDERED_NODE_TYPE,
                    null
                );
                const element = result.singleNodeValue;

                if (!element) return false;

                // Ki·ªÉm tra element c√≥ hi·ªÉn th·ªã kh√¥ng
                const style = window.getComputedStyle(element);
                return (
                    element.offsetParent !== null &&
                    style.visibility !== 'hidden' &&
                    style.display !== 'none' &&
                    style.opacity !== '0'
                );
            }, xpath);

            if (!elementExists) {
                console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ${elementName}, ti·∫øp t·ª•c c√°c b∆∞·ªõc ti·∫øp theo`);
                return false;
            }

            // Click element
            await this.clickElement(xpath);
            console.log(`‚úÖ ƒê√£ click ${elementName}`);
            return true;

        } catch (error) {
            console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ click ${elementName}, b·ªè qua:`, error.message);
            return false;
        }
    }

    /**
     * Click element v·ªõi XPath (phi√™n b·∫£n c·∫£i ti·∫øn)
     * @param {string} xpath - XPath c·ªßa element
     */
    async clickElement(xpath) {
        try {
            // ƒê·ª£i element xu·∫•t hi·ªán v√† hi·ªÉn th·ªã
            await this.page.waitForFunction(
                (xpath) => {
                    const result = document.evaluate(
                        xpath,
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    );
                    const element = result.singleNodeValue;
                    if (!element) return false;

                    const style = window.getComputedStyle(element);
                    return (
                        element.offsetParent !== null &&
                        style.visibility !== 'hidden' &&
                        style.display !== 'none' &&
                        style.opacity !== '0'
                    );
                }, {
                    timeout: 10000,
                    polling: 'raf' // Request animation frame polling for better performance
                },
                xpath
            );

            // Click element
            const clicked = await this.page.evaluate((xpath) => {
                const result = document.evaluate(
                    xpath,
                    document,
                    null,
                    XPathResult.FIRST_ORDERED_NODE_TYPE,
                    null
                );
                const element = result.singleNodeValue;

                if (!element) return false;

                // Scroll element v√†o view
                element.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                    inline: 'center'
                });

                // Th·ª≠ c√°c c√°ch click kh√°c nhau
                try {
                    // C√°ch 1: Click tr·ª±c ti·∫øp
                    element.click();
                    return true;
                } catch (e1) {
                    try {
                        // C√°ch 2: Dispatch MouseEvent
                        element.dispatchEvent(new MouseEvent('click', {
                            view: window,
                            bubbles: true,
                            cancelable: true,
                            button: 0
                        }));
                        return true;
                    } catch (e2) {
                        try {
                            // C√°ch 3: Focus v√† trigger
                            element.focus();
                            element.dispatchEvent(new Event('click', { bubbles: true }));
                            return true;
                        } catch (e3) {
                            console.error('T·∫•t c·∫£ c√°c c√°ch click ƒë·ªÅu th·∫•t b·∫°i:', e1.message, e2.message, e3.message);
                            return false;
                        }
                    }
                }
            }, xpath);

            if (!clicked) {
                throw new Error(`‚ùå Kh√¥ng th·ªÉ click element v·ªõi XPath: ${xpath}`);
            }

            // Delay nh·ªè sau khi click
            await this.delay(200, 500);

        } catch (error) {
            console.error('‚ùå L·ªói khi click element:', error.message);
            throw new Error(`‚ùå L·ªói khi click element: ${error.message}`);
        }
    }

    /**
     * X·ª≠ l√Ω ch·ªçn Bang/T·ªânh n·∫øu ƒëƒÉng k√Ω ·ªü Hoa K·ª≥
     * @param {string} selectedCountry - Qu·ªëc gia ƒë√£ ch·ªçn
     */
    async handleUSStateSelection(selectedCountry) {
        console.log('\nüá∫üá∏ ==> ENTERING handleUSStateSelection()');
        console.log(`üá∫üá∏ ==> selectedCountry: "${selectedCountry}"`);

        try {
            // Ki·ªÉm tra xem c√≥ ph·∫£i Hoa K·ª≥ kh√¥ng (h·ªó tr·ª£ nhi·ªÅu c√°ch vi·∫øt)
            console.log('üîç Checking if country is USA...');
            const isUSA = this.isUSACountry(selectedCountry);
            console.log(`üîç isUSACountry result: ${isUSA}`);

            if (!isUSA) {
                console.log('‚ö†Ô∏è Kh√¥ng ph·∫£i Hoa K·ª≥, b·ªè qua ch·ªçn bang/t·ªânh');
                console.log('üá∫üá∏ ==> EXITING handleUSStateSelection() - NOT USA');
                return;
            }

            console.log('üá∫üá∏ ƒê√£ ch·ªçn Hoa K·ª≥, c·∫ßn ch·ªçn bang/t·ªânh...');

            // ƒê·ª£i form render v√† t√¨m administrative-district-item
            await this.delay(2000, 3000);

            // Ki·ªÉm tra xem c√≥ field ch·ªçn bang/t·ªânh kh√¥ng
            const hasStateField = await this.page.evaluate(() => {
                // T√¨m element theo nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ robust
                const stateSelectors = [
                    '.administrative-district-item .vi-input--suffix',
                    '.administrative-district-item .vi-select',
                    '[class*="administrative-district"] .vi-input--suffix',
                    'input[placeholder*="t·ªânh"]',
                    'input[placeholder*="ti·ªÉu bang"]',
                    'input[placeholder*="Ch·ªçn t·ªânh"]',
                    'input[placeholder*="bang/t·ªânh"]'
                ];

                for (const selector of stateSelectors) {
                    const element = document.querySelector(selector);
                    if (element) {
                        // Ki·ªÉm tra element c√≥ hi·ªÉn th·ªã kh√¥ng
                        const style = window.getComputedStyle(element);
                        const isVisible = (
                            element.offsetParent !== null &&
                            style.visibility !== 'hidden' &&
                            style.display !== 'none' &&
                            style.opacity !== '0'
                        );
                        if (isVisible) {
                            console.log('‚úÖ T√¨m th·∫•y field bang/t·ªânh:', selector);
                            return { found: true, selector };
                        }
                    }
                }
                return { found: false };
            });

            if (!hasStateField.found) {
                console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y field ch·ªçn bang/t·ªânh, c√≥ th·ªÉ ch∆∞a render ho·∫∑c kh√¥ng c·∫ßn thi·∫øt');
                return;
            }

            console.log('‚úÖ T√¨m th·∫•y field bang/t·ªânh, b·∫Øt ƒë·∫ßu ch·ªçn...');

            // M·ªü dropdown v√† ch·ªçn Texas (fix c·ª©ng theo y√™u c·∫ßu user)
            const selectedState = await this.page.evaluate(() => {
                console.log('üñ±Ô∏è M·ªü dropdown bang/t·ªânh...');

                // Debug: ki·ªÉm tra element tr∆∞·ªõc khi click
                const dropdownElement = document.querySelector('.administrative-district-item .vi-input--suffix');
                console.log('üîç Dropdown element found:', !!dropdownElement);

                if (dropdownElement) {
                    // Log th√¥ng tin v·ªÅ element
                    const parentText = dropdownElement.closest('.administrative-district-item').textContent;
                    console.log('üìã Parent element text:', parentText.trim().substring(0, 100));

                    // M·ªü dropdown
                    dropdownElement.click();
                    console.log('‚úÖ ƒê√£ click m·ªü dropdown');
                } else {
                    console.log('‚ùå Kh√¥ng t√¨m th·∫•y dropdown element');
                }

                // ƒê·ª£i dropdown render v√† ch·ªçn Texas
                return new Promise((resolve) => {
                    setTimeout(() => {
                        console.log('üîç T√¨m Texas trong options...');
                        const option = Array.from(document.querySelectorAll('.vi-select-dropdown__item'))
                            .find(el => el.textContent.trim() === 'Texas');

                        if (option) {
                            console.log('üéØ T√¨m th·∫•y Texas, ƒëang click...');
                            option.click();
                            console.log('‚úÖ ƒê√£ ch·ªçn Texas th√†nh c√¥ng');
                            resolve('Texas');
                        } else {
                            console.log('‚ùå Kh√¥ng t√¨m th·∫•y Texas trong options');
                            const allOptions = Array.from(document.querySelectorAll('.vi-select-dropdown__item'))
                                .map(el => `"${el.textContent.trim()}"`);
                            console.log('üìã C√°c options c√≥ s·∫µn:', allOptions.slice(0, 10));
                            resolve(null);
                        }
                    }, 300);
                });
            });

            await this.delay(1000, 1500);

            if (selectedState) {
                console.log(`‚úÖ ƒê√£ ch·ªçn bang: "${selectedState}"`);
                console.log('‚úÖ Ho√†n th√†nh ch·ªçn bang/t·ªânh cho Hoa K·ª≥');
                console.log('üá∫üá∏ ==> EXITING handleUSStateSelection() - SUCCESS');
            } else {
                console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªçn bang/t·ªânh, nh∆∞ng s·∫Ω ti·∫øp t·ª•c');
                console.log('üá∫üá∏ ==> EXITING handleUSStateSelection() - PARTIAL SUCCESS');
            }

        } catch (error) {
            console.log('‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ch·ªçn bang/t·ªânh:', error.message);
            console.log('‚ö†Ô∏è Ti·∫øp t·ª•c v·ªõi c√°c b∆∞·ªõc ti·∫øp theo...');
            console.log('üá∫üá∏ ==> EXITING handleUSStateSelection() - ERROR');
        }
    }

    /**
     * Ki·ªÉm tra xem qu·ªëc gia c√≥ ph·∫£i Hoa K·ª≥ kh√¥ng
     * @param {string} country - T√™n qu·ªëc gia
     * @returns {boolean}
     */
    isUSACountry(country) {
        console.log(`üîç [isUSACountry] Input: "${country}"`);

        if (!country || typeof country !== 'string') {
            console.log('üîç [isUSACountry] Invalid input - not a string');
            return false;
        }

        const countryLower = country.toLowerCase().trim();
        console.log(`üîç [isUSACountry] Normalized: "${countryLower}"`);

        // Danh s√°ch c√°c c√°ch vi·∫øt Hoa K·ª≥ trong ti·∫øng Vi·ªát v√† ti·∫øng Anh
        const usaVariants = [
            'hoa k·ª≥',
            'hoa k√¨',
            'm·ªπ',
            'united states',
            'usa',
            'us',
            'america',
            'united states of america',
            'n∆∞·ªõc m·ªπ',
            'm·ªπ qu·ªëc'
        ];

        const result = usaVariants.some(variant => {
            const match = countryLower.includes(variant) || variant.includes(countryLower);
            if (match) {
                console.log(`üîç [isUSACountry] Matched variant: "${variant}"`);
            }
            return match;
        });

        console.log(`üîç [isUSACountry] Final result: ${result}`);
        return result;
    }

    /**
     * Delay ng·∫´u nhi√™n
     * @param {number} min - Th·ªùi gian t·ªëi thi·ªÉu (ms)
     * @param {number} max - Th·ªùi gian t·ªëi ƒëa (ms)
     */
    async delay(min, max) {
        const ms = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = BcAgencyHandler;