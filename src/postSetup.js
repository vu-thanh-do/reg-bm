const { randomDelay } = require('./utils');
const ViotpService = require('./services/codeSimService');
const BillingService = require('./services/billingService');
const AccountsListHandler = require('./accountsListHandler');
const SurveyProtectionService = require('./services/surveyProtectionService');

class PostSetup {
    constructor(page, userConfig) {
        this.page = page;
        this.userConfig = userConfig;
        this.viotpService = new ViotpService();
        this.billingService = new BillingService(page);
        this.requestId = null; // L∆∞u requestId t·ª´ Viotp
        this.bcType = null; // L∆∞u lo·∫°i BC (Tr·∫£ tr∆∞·ªõc/Tr·∫£ sau)
        this.isSendingOtp = false; // Flag ƒë·ªÉ theo d√µi tr·∫°ng th√°i g·ª≠i OTP
    }

    async waitForTwoStepVerification() {
        console.log('ƒêang ch·ªù trang two-step verification...');

        // Ch·ªù URL ch·ª©a two-step-verification
        await this.page.waitForFunction(() => {
            return window.location.href.includes('two-step-verification');
        }, { timeout: 30000 });
        await this.page.waitForSelector('.two-sv-footer button', { timeout: 15000 });
        // Ch·ªù th√™m ƒë·ªÉ ƒë·∫£m b·∫£o trang load ho√†n to√†n
        await randomDelay(3000, 5000);
        // Debug: In ra th√¥ng tin c√°c button
        const buttonInfo = await this.page.evaluate(() => {
            const buttons = document.querySelectorAll('.two-sv-footer button');
            const info = [];
            for (let i = 0; i < buttons.length; i++) {
                info.push({
                    index: i,
                    text: buttons[i].textContent.trim(),
                    className: buttons[i].className,
                    disabled: buttons[i].disabled,
                    visible: buttons[i].offsetParent !== null
                });
            }
            return info;
        });
        await randomDelay(2000, 3000);
    }
    async skipTwoStepVerification() {
        try {
            // Click button ƒë·∫ßu ti√™n b·∫±ng XPath nh∆∞ user cung c·∫•p
            const clickResult = await this.page.evaluate(() => {
                const btn = document.evaluate(
                    "//div[contains(@class, 'two-sv-footer')]//button[1]",
                    document,
                    null,
                    XPathResult.FIRST_ORDERED_NODE_TYPE,
                    null
                ).singleNodeValue;

                if (btn) {
                    const text = btn.textContent.trim();
                    const className = btn.className;
                    const disabled = btn.disabled;
                    const visible = btn.offsetParent !== null;

                    console.log(`T√¨m th·∫•y button: "${text}" (class: ${className}, disabled: ${disabled}, visible: ${visible})`);

                    btn.click();
                    return {
                        success: true,
                        text: text,
                        className: className,
                        disabled: disabled,
                        visible: visible
                    };
                }
                return { success: false, error: 'Kh√¥ng t√¨m th·∫•y button ƒë·∫ßu ti√™n' };
            });

            if (clickResult.success) {
                console.log(`ƒê√£ click button: "${clickResult.text}" (disabled: ${clickResult.disabled}, visible: ${clickResult.visible})`);

                // Ch·ªù l√¢u h∆°n ƒë·ªÉ button ho·∫°t ƒë·ªông
                await randomDelay(5000, 8000);

                // Ch·ªù URL load xong (chuy·ªÉn v·ªÅ trang ch√≠nh)
                await this.page.waitForFunction(() => {
                    return !window.location.href.includes('two-step-verification');
                }, { timeout: 30000 });

                console.log('ƒê√£ tho√°t kh·ªèi trang two-step verification, URL hi·ªán t·∫°i:', await this.page.url());
            } else {
                throw new Error('Kh√¥ng th·ªÉ click button: ' + clickResult.error);
            }
        } catch (error) {
            console.error('L·ªói khi b·ªè qua two-step verification:', error.message);
        }
    }

    async navigateToAccounts() {
        try {
            const currentUrl = await this.page.url();
            const urlMatch = currentUrl.match(/org_id=(\d+)/);
            if (!urlMatch) {
                throw new Error('Kh√¥ng t√¨m th·∫•y org_id trong URL: ' + currentUrl);
            }
            const orgId = urlMatch[1];
            const accountsUrl = `https://business.tiktok.com/manage/accounts/adv?org_id=${orgId}&show-adv-guide=yes&overviewfrom=bc_registration`;
            await this.page.goto(accountsUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });
            await randomDelay(2000, 3000);
        } catch (error) {
            console.error('L·ªói khi chuy·ªÉn ƒë·∫øn trang Accounts:', error.message);
        }
    }

    async waitForAccountsPageLoad() {
        try {
            await this.page.waitForFunction(() => {
                return document.readyState === 'complete';
            }, { timeout: 30000 });
            await randomDelay(3000, 5000);

            // F5 trang ƒë·ªÉ l√†m s·∫°ch cache v√† d·ªØ li·ªáu
            console.log('üîÑ ƒêang refresh trang ƒë·ªÉ l√†m s·∫°ch cache v√† d·ªØ li·ªáu...');
            await this.page.reload();
            await randomDelay(5000, 8000); // Ch·ªù trang load l·∫°i

            console.log('‚úÖ ƒê√£ refresh trang th√†nh c√¥ng');

            const pageInfo = await this.page.evaluate(() => {
                const inputs = document.querySelectorAll('input');
                const buttons = document.querySelectorAll('button');
                const selects = document.querySelectorAll('select');

                const inputInfo = Array.from(inputs).map((input, index) => ({
                    index,
                    type: input.type,
                    placeholder: input.placeholder,
                    className: input.className,
                    id: input.id,
                    name: input.name
                }));

                const buttonInfo = Array.from(buttons).map((button, index) => ({
                    index,
                    text: button.textContent.trim(),
                    className: button.className,
                    type: button.type
                }));

                const selectInfo = Array.from(selects).map((select, index) => ({
                    index,
                    className: select.className,
                    id: select.id,
                    name: select.name
                }));

                return {
                    inputs: inputInfo,
                    buttons: buttonInfo,
                    selects: selectInfo,
                    url: window.location.href
                };
            });
        } catch (error) {
            console.error('L·ªói khi ch·ªù trang Accounts load:', error.message);
        }
    }

    async selectIndustry() {
        try {
            const industryInput = await this.page.waitForSelector('input[placeholder="Ch·ªçn m·ªôt ng√†nh"]', { timeout: 10000 });
            if (!industryInput) {
                throw new Error('Kh√¥ng t√¨m th·∫•y input ch·ªçn ng√†nh');
            }
            await industryInput.click();
            await randomDelay(2000, 3000);

            const waitAndClick = async(text, timeout = 10000) => {
                const step = 200;
                let elapsed = 0;

                while (elapsed < timeout) {
                    try {
                        const elements = await this.page.$$('.bc-okee-cascader-item-label');

                        for (const element of elements) {
                            const elementText = await element.evaluate(el => el.innerText.trim());
                            if (elementText === text) {
                                await element.click();
                                console.log(`ƒê√£ click v√†o: ${text}`);
                                return;
                            }
                        }

                        // N·∫øu kh√¥ng t√¨m th·∫•y, ch·ªù th√™m
                        await new Promise(resolve => setTimeout(resolve, step));
                        elapsed += step;

                    } catch (error) {
                        console.log(`L·ªói khi t√¨m ${text}:`, error.message);
                        await new Promise(resolve => setTimeout(resolve, step));
                        elapsed += step;
                    }
                }

                throw new Error(`Kh√¥ng t√¨m th·∫•y option: ${text} sau ${timeout}ms`);
            };

            // Ch·ªçn "D·ªãch v·ª•"
            await waitAndClick("D·ªãch v·ª•");
            await randomDelay(2000, 3000);

            // Ch·ªçn "Xu·∫•t b·∫£n"
            await waitAndClick("Xu·∫•t b·∫£n");
            await randomDelay(2000, 3000);

            console.log('‚úÖ ƒê√£ ch·ªçn ng√†nh: D·ªãch v·ª• ‚Üí Xu·∫•t b·∫£n');

        } catch (error) {
            console.error('L·ªói khi ch·ªçn ng√†nh:', error.message);
            try {
                await this.page.evaluate(async() => {
                    const waitAndClick = async(text, timeout = 5000) => {
                        const step = 100;
                        let elapsed = 0;
                        while (elapsed < timeout) {
                            const el = [...document.querySelectorAll('.bc-okee-cascader-item-label')]
                                .find(e => e.innerText.trim() === text);
                            if (el) {
                                el.click();
                                return;
                            }
                            await new Promise(r => setTimeout(r, step));
                            elapsed += step;
                        }
                        throw new Error(`Kh√¥ng t√¨m th·∫•y: ${text}`);
                    };

                    const input = document.querySelector('input[placeholder="Ch·ªçn m·ªôt ng√†nh"]');
                    if (input) input.click();
                    await waitAndClick("D·ªãch v·ª•");
                    await waitAndClick("Xu·∫•t b·∫£n");
                    console.log("‚úÖ ƒê√£ ch·ªçn ng√†nh D·ªãch v·ª• ‚Üí Xu·∫•t b·∫£n");
                });

                console.log('ƒê√£ th·ª≠ ph∆∞∆°ng ph√°p fallback cho ch·ªçn ng√†nh');
            } catch (fallbackError) {
                console.error('Ph∆∞∆°ng ph√°p fallback c≈©ng th·∫•t b·∫°i:', fallbackError.message);
            }
        }
    }

    async fillResponsiblePerson() {
        try {
            console.log('ƒêang ƒëi·ªÅn t√™n ng∆∞·ªùi ch·ªãu tr√°ch nhi·ªám...');

            // T√¨m input t√™n
            const nameInput = await this.page.waitForSelector('input[placeholder*="T√™n ng∆∞·ªùi ch·ªãu tr√°ch nhi·ªám"]', { timeout: 5000 });
            if (!nameInput) {
                throw new Error('Kh√¥ng t√¨m th·∫•y input t√™n');
            }

            // ƒêi·ªÅn t√™n ng·∫´u nhi√™n
            const randomName = `Nguyen Van ${Math.random().toString(36).substring(7)}`;
            await nameInput.type(randomName);
            console.log(`‚úÖ ƒê√£ ƒëi·ªÅn t√™n: ${randomName}`);
            await randomDelay(1000, 2000);

        } catch (error) {
            console.error('L·ªói khi ƒëi·ªÅn t√™n:', error.message);
        }
    }

    async selectPhoneCountryCode() {
        console.log('ƒêang ch·ªçn m√£ qu·ªëc gia +84...');

        try {
            // Click v√†o dropdown m√£ qu·ªëc gia
            await this.page.click('.area-code-box');
            await randomDelay(2000, 3000);

            // Ch·ªçn +84 (Vi·ªát Nam)
            await this.page.click('li[data-value="+84"]');
            console.log('‚úÖ ƒê√£ ch·ªçn m√£ qu·ªëc gia +84');
            await randomDelay(2000, 3000);

        } catch (error) {
            console.error('L·ªói khi ch·ªçn m√£ qu·ªëc gia:', error.message);

            // Fallback: Th·ª≠ v·ªõi XPath
            try {
                console.log('Th·ª≠ ph∆∞∆°ng ph√°p fallback...');
                await this.page.evaluate(() => {
                    const dropdown = document.querySelector('.area-code-box');
                    if (dropdown) dropdown.click();
                });
                await randomDelay(2000, 3000);

                await this.page.evaluate(() => {
                    const option = document.querySelector('li[data-value="+84"]');
                    if (option) option.click();
                });
                console.log('‚úÖ ƒê√£ ch·ªçn m√£ qu·ªëc gia +84 (fallback)');
            } catch (fallbackError) {
                console.error('Fallback c≈©ng th·∫•t b·∫°i:', fallbackError.message);
            }
        }
    }

    async fillPhoneNumber() {
        console.log('ƒêang l·∫•y v√† ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i...');
        try {
            // L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ Viotp
            const phoneData = await this.viotpService.getPhoneNumber();
            console.log('Phone data t·ª´ Viotp:', phoneData);

            if (!phoneData || !phoneData.phone) {
                throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c s·ªë ƒëi·ªán tho·∫°i t·ª´ Viotp');
            }

            const phoneNumber = phoneData.phone;
            this.requestId = phoneData.requestId; // L∆∞u requestId ƒë·ªÉ s·ª≠ d·ª•ng sau

            console.log(`‚úÖ ƒê√£ l·∫•y s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}`);
            console.log(`‚úÖ ƒê√£ l∆∞u requestId: ${this.requestId}`);
            console.log(`‚úÖ Ki·ªÉm tra requestId trong instance: ${this.requestId}`);

            // T√¨m input s·ªë ƒëi·ªán tho·∫°i
            const phoneInput = await this.page.waitForSelector('input[type="tel"]', { timeout: 10000 });
            if (!phoneInput) {
                throw new Error('Kh√¥ng t√¨m th·∫•y input s·ªë ƒëi·ªán tho·∫°i');
            }

            console.log('‚úÖ T√¨m th·∫•y input s·ªë ƒëi·ªán tho·∫°i');

            // Clear input tr∆∞·ªõc khi nh·∫≠p
            await phoneInput.click();
            await randomDelay(500, 1000);

            await phoneInput.evaluate((el) => {
                el.value = '';
                el.dispatchEvent(new Event('input', { bubbles: true }));
                el.dispatchEvent(new Event('change', { bubbles: true }));
            });
            await randomDelay(1000, 2000);

            // Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i t·ª´ng k√Ω t·ª±
            console.log('ƒêang nh·∫≠p s·ªë ƒëi·ªán tho·∫°i t·ª´ng k√Ω t·ª±...');
            for (let i = 0; i < phoneNumber.length; i++) {
                await phoneInput.type(phoneNumber[i], { delay: 0 });
                await phoneInput.evaluate((el) => {
                    el.dispatchEvent(new Event('input', { bubbles: true }));
                });
                await randomDelay(200, 400);
            }

            // Trigger final events
            await phoneInput.evaluate((el) => {
                el.dispatchEvent(new Event('change', { bubbles: true }));
                el.dispatchEvent(new Event('blur', { bubbles: true }));
            });

            console.log(`‚úÖ ƒê√£ ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}`);

            // Verify s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c nh·∫≠p ƒë√∫ng
            const currentValue = await phoneInput.evaluate(el => el.value);
            console.log('S·ªë ƒëi·ªán tho·∫°i trong input:', currentValue);

            if (currentValue !== phoneNumber) {
                console.log('‚ùå S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒë√∫ng, nh·∫≠p l·∫°i...');
                await phoneInput.evaluate((el) => {
                    el.value = '';
                    el.dispatchEvent(new Event('input', { bubbles: true }));
                });
                await randomDelay(1000, 2000);

                await phoneInput.type(phoneNumber, { delay: 100 });
                await phoneInput.evaluate((el) => {
                    el.dispatchEvent(new Event('change', { bubbles: true }));
                    el.dispatchEvent(new Event('blur', { bubbles: true }));
                });
            }

            console.log('‚úÖ Ho√†n th√†nh ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i');
            await randomDelay(2000, 3000);
        } catch (error) {
            console.error('L·ªói khi ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i:', error.message);
            throw error;
        }
    }

    // Th√™m method m·ªõi ƒë·ªÉ verify s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi g·ª≠i
    async verifyPhoneNumberBeforeSend() {
        console.log('ƒêang verify s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi g·ª≠i OTP...');

        try {
            const phoneInput = await this.page.waitForSelector('input[type="tel"]', { timeout: 5000 });
            if (!phoneInput) {
                console.log('Kh√¥ng t√¨m th·∫•y input s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ verify');
                return false;
            }

            // Ki·ªÉm tra input.value ph√≠a client
            const clientValue = await phoneInput.evaluate(el => el.value);
            console.log(`S·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i (client): ${clientValue}`);

            // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i c√≥ h·ª£p l·ªá kh√¥ng
            if (!clientValue || clientValue.length < 9) {
                console.log('‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá, c·∫ßn nh·∫≠p l·∫°i');
                return false;
            }

            // Ki·ªÉm tra format s·ªë ƒëi·ªán tho·∫°i (ch·ªâ ch·ª©a s·ªë)
            const phoneRegex = /^\d+$/;
            if (!phoneRegex.test(clientValue)) {
                console.log('‚ùå S·ªë ƒëi·ªán tho·∫°i ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá');
                return false;
            }

            // Ki·ªÉm tra xem input c√≥ ƒëang focus kh√¥ng
            const isFocused = await phoneInput.evaluate(el => el === document.activeElement);
            if (isFocused) {
                console.log('‚ö†Ô∏è Input ƒëang focus, blur ƒë·ªÉ trigger validation');
                await phoneInput.evaluate(el => el.blur());
                await randomDelay(1000, 2000);
            }

            // Th√™m delay ƒë·ªÉ ƒë·∫£m b·∫£o form ƒë√£ ƒë∆∞·ª£c validate
            await randomDelay(2000, 3000);

            // Ki·ªÉm tra xem c√≥ l·ªói validation n√†o kh√¥ng
            const validationState = await this.page.evaluate(() => {
                const errorElements = document.querySelectorAll('.error, .validate_error, [class*="error"]');
                const successElements = document.querySelectorAll('.success, [class*="success"]');

                return {
                    hasError: errorElements.length > 0,
                    hasSuccess: successElements.length > 0,
                    errorTexts: Array.from(errorElements).map(el => el.textContent.trim()),
                    successTexts: Array.from(successElements).map(el => el.textContent.trim())
                };
            });

            if (validationState.hasError) {
                console.log('‚ùå C√≥ l·ªói validation:', validationState.errorTexts);
                return false;
            }

            if (validationState.hasSuccess) {
                console.log('‚úÖ C√≥ th√¥ng b√°o th√†nh c√¥ng:', validationState.successTexts);
            }

            // Ki·ªÉm tra tr·∫°ng th√°i button G·ª≠i
            const sendButtonState = await this.checkButtonState('G·ª≠i');
            if (sendButtonState) {
                if (sendButtonState.disabled) {
                    console.log('‚ùå Button G·ª≠i ƒëang b·ªã disabled');
                    return false;
                }
                console.log('‚úÖ Button G·ª≠i s·∫µn s√†ng');
            }

            console.log('‚úÖ S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c verify th√†nh c√¥ng');
            return true;

        } catch (error) {
            console.error('L·ªói khi verify s·ªë ƒëi·ªán tho·∫°i:', error.message);
            return false;
        }
    }

    async clickSendButton() {
            console.log('ƒêang t√¨m v√† click button G·ª≠i...');

            try {
                // T√¨m button G·ª≠i b·∫±ng nhi·ªÅu c√°ch
                const clicked = await this.page.evaluate(() => {
                    const selectors = [
                        '//button[normalize-space(text())="G·ª≠i"]',
                        '//button[contains(text(),"G·ª≠i")]',
                        '//button[contains(@class, "bc-okee-btn") and contains(text(), "G·ª≠i")]',
                        '//button[contains(@class, "bc-okee-btn-type-primary")]',
                        '//button[contains(@class, "style_loading_btn")]'
                    ];

                    for (const xpath of selectors) {
                        try {
                            const btn = document.evaluate(
                                xpath,
                                document,
                                null,
                                XPathResult.FIRST_ORDERED_NODE_TYPE,
                                null
                            ).singleNodeValue;

                            if (btn && !btn.disabled && btn.offsetParent !== null) {
                                console.log(`T√¨m th·∫•y button G·ª≠i: "${btn.textContent.trim()}"`);
                                btn.click();
                                return true;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    return false;
                });

                if (clicked) {
                    console.log('‚úÖ ƒê√£ click button G·ª≠i');
                    await randomDelay(3000, 5000);
                    return true;
                }

                // Fallback: T√¨m t·∫•t c·∫£ button v√† click button cu·ªëi c√πng
                const allButtons = await this.page.$$('button');
                for (let i = allButtons.length - 1; i >= 0; i--) {
                    const button = allButtons[i];
                    const text = await button.evaluate(el => el.textContent.trim());
                    const isVisible = await button.evaluate(el => el.offsetParent !== null);
                    const isEnabled = await button.evaluate(el => !el.disabled);

                    if (text === 'G·ª≠i' && isVisible && isEnabled) {
                        await button.click();
                        console.log('‚úÖ ƒê√£ click button G·ª≠i (fallback)');
                        await randomDelay(3000, 5000);
                        return true;
                    }
                }

                throw new Error('Kh√¥ng t√¨m th·∫•y button G·ª≠i');

            } catch (error) {
                console.error('L·ªói khi click button G·ª≠i:', error.message);
                return false;
            }
        }
        // Ph∆∞∆°ng ph√°p 1: Click button X√°c nh·∫≠n OTP (ƒë∆∞·ª£c s·ª≠a)
    async clickConfirmOtpButton() {
        console.log('ƒêang t√¨m v√† click button X√°c nh·∫≠n OTP...');

        // Th√™m delay tr∆∞·ªõc khi click (nh∆∞ ng∆∞·ªùi th·∫≠t)
        console.log('Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi click X√°c nh·∫≠n nh∆∞ ng∆∞·ªùi th·∫≠t...');
        await randomDelay(2000, 4000);

        try {
            // Method 1: Th·ª≠ v·ªõi XPath trong evaluate v√† click lu√¥n
            const clicked = await this.page.evaluate(() => {
                // T√¨m button v·ªõi nhi·ªÅu c√°ch kh√°c nhau
                const selectors = [
                    '//button[normalize-space(text())="X√°c nh·∫≠n"]',
                    '//button[contains(text(),"X√°c nh·∫≠n")]',
                    '//button[contains(@class,"confirm") or contains(@class,"primary")]//span[text()="X√°c nh·∫≠n"]/parent::button',
                    '//button[span[text()="X√°c nh·∫≠n"]]'
                ];

                for (const xpath of selectors) {
                    try {
                        const btn = document.evaluate(
                            xpath,
                            document,
                            null,
                            XPathResult.FIRST_ORDERED_NODE_TYPE,
                            null
                        ).singleNodeValue;

                        if (btn && !btn.disabled && btn.offsetParent !== null) {
                            console.log(`T√¨m th·∫•y button X√°c nh·∫≠n v·ªõi XPath: ${xpath}`);
                            console.log(`Button text: "${btn.textContent.trim()}"`);
                            btn.click();
                            return true;
                        }
                    } catch (e) {
                        continue;
                    }
                }
                return false;
            });

            if (clicked) {
                console.log('‚úÖ ƒê√£ click button X√°c nh·∫≠n b·∫±ng XPath');
                await randomDelay(3000, 5000);
                return true;
            }

            // Method 2: Th·ª≠ v·ªõi CSS selector
            const confirmSelectors = [
                'button:contains("X√°c nh·∫≠n")',
                'button[class*="confirm"]',
                'button[class*="primary"]',
                '.bc-okee-btn-type-primary',
                'button.bc-okee-btn:last-child'
            ];

            for (const selector of confirmSelectors) {
                try {
                    await this.page.waitForSelector(selector, { timeout: 2000 });
                    const button = await this.page.$(selector);
                    if (button) {
                        const isVisible = await button.evaluate(el => el.offsetParent !== null);
                        const isEnabled = await button.evaluate(el => !el.disabled);
                        const text = await button.evaluate(el => el.textContent.trim());

                        if (isVisible && isEnabled && text.includes('X√°c nh·∫≠n')) {
                            await button.click();
                            console.log(`‚úÖ ƒê√£ click button X√°c nh·∫≠n v·ªõi selector: ${selector}`);
                            await randomDelay(3000, 5000);
                            return true;
                        }
                    }
                } catch (e) {
                    continue;
                }
            }

            // Method 3: T√¨m t·∫•t c·∫£ button v√† filter theo text
            const allButtons = await this.page.$$('button');
            for (const button of allButtons) {
                const text = await button.evaluate(el => el.textContent.trim());
                const isVisible = await button.evaluate(el => el.offsetParent !== null);
                const isEnabled = await button.evaluate(el => !el.disabled);

                if (text === 'X√°c nh·∫≠n' && isVisible && isEnabled) {
                    await button.click();
                    console.log('‚úÖ ƒê√£ click button X√°c nh·∫≠n b·∫±ng c√°ch duy·ªát t·∫•t c·∫£ button');
                    await randomDelay(3000, 5000);
                    return true;
                }
            }

            throw new Error('Kh√¥ng t√¨m th·∫•y button X√°c nh·∫≠n c√≥ th·ªÉ click ƒë∆∞·ª£c');

        } catch (error) {
            console.error('L·ªói khi click button X√°c nh·∫≠n:', error.message);

            // Debug: In ra th√¥ng tin t·∫•t c·∫£ button
            await this.debugAllButtons();
            return false;
        }
    }

    // Ph∆∞∆°ng ph√°p 2: Click button H·ªßy (ƒë∆∞·ª£c s·ª≠a)
    async clickCancelButton() {
        console.log('ƒêang t√¨m v√† click button H·ªßy...');

        try {
            // Method 1: Th·ª≠ v·ªõi XPath trong evaluate v√† click lu√¥n
            const clicked = await this.page.evaluate(() => {
                const selectors = [
                    '//button[normalize-space(text())="H·ªßy"]',
                    '//button[contains(text(),"H·ªßy")]',
                    '//button[contains(@class,"cancel") or contains(@class,"secondary")]//span[text()="H·ªßy"]/parent::button',
                    '//button[span[text()="H·ªßy"]]'
                ];

                for (const xpath of selectors) {
                    try {
                        const btn = document.evaluate(
                            xpath,
                            document,
                            null,
                            XPathResult.FIRST_ORDERED_NODE_TYPE,
                            null
                        ).singleNodeValue;

                        if (btn && !btn.disabled && btn.offsetParent !== null) {
                            console.log(`T√¨m th·∫•y button H·ªßy v·ªõi XPath: ${xpath}`);
                            console.log(`Button text: "${btn.textContent.trim()}"`);
                            btn.click();
                            return true;
                        }
                    } catch (e) {
                        continue;
                    }
                }
                return false;
            });

            if (clicked) {
                console.log('‚úÖ ƒê√£ click button H·ªßy b·∫±ng XPath');
                await randomDelay(2000, 3000);
                return true;
            }

            // Method 2: Th·ª≠ v·ªõi CSS selector
            const cancelSelectors = [
                'button:contains("H·ªßy")',
                'button[class*="cancel"]',
                'button[class*="secondary"]',
                '.bc-okee-btn-type-secondary',
                'button.bc-okee-btn:first-child'
            ];

            for (const selector of cancelSelectors) {
                try {
                    await this.page.waitForSelector(selector, { timeout: 2000 });
                    const button = await this.page.$(selector);
                    if (button) {
                        const isVisible = await button.evaluate(el => el.offsetParent !== null);
                        const isEnabled = await button.evaluate(el => !el.disabled);
                        const text = await button.evaluate(el => el.textContent.trim());

                        if (isVisible && isEnabled && text.includes('H·ªßy')) {
                            await button.click();
                            console.log(`‚úÖ ƒê√£ click button H·ªßy v·ªõi selector: ${selector}`);
                            await randomDelay(2000, 3000);
                            return true;
                        }
                    }
                } catch (e) {
                    continue;
                }
            }

            // Method 3: T√¨m t·∫•t c·∫£ button v√† filter theo text
            const allButtons = await this.page.$$('button');
            for (const button of allButtons) {
                const text = await button.evaluate(el => el.textContent.trim());
                const isVisible = await button.evaluate(el => el.offsetParent !== null);
                const isEnabled = await button.evaluate(el => !el.disabled);

                if (text === 'H·ªßy' && isVisible && isEnabled) {
                    await button.click();
                    console.log('‚úÖ ƒê√£ click button H·ªßy b·∫±ng c√°ch duy·ªát t·∫•t c·∫£ button');
                    await randomDelay(2000, 3000);
                    return true;
                }
            }

            throw new Error('Kh√¥ng t√¨m th·∫•y button H·ªßy c√≥ th·ªÉ click ƒë∆∞·ª£c');

        } catch (error) {
            console.error('L·ªói khi click button H·ªßy:', error.message);

            // Debug: In ra th√¥ng tin t·∫•t c·∫£ button
            await this.debugAllButtons();
            return false;
        }
    }

    // Helper method: Debug t·∫•t c·∫£ button
    async debugAllButtons() {
        console.log('=== DEBUG: Th√¥ng tin t·∫•t c·∫£ button tr√™n trang ===');

        const buttonInfo = await this.page.evaluate(() => {
            const buttons = document.querySelectorAll('button');
            const info = [];

            for (let i = 0; i < buttons.length; i++) {
                const btn = buttons[i];
                info.push({
                    index: i,
                    text: btn.textContent.trim(),
                    innerHTML: btn.innerHTML,
                    className: btn.className,
                    disabled: btn.disabled,
                    visible: btn.offsetParent !== null,
                    style: {
                        display: window.getComputedStyle(btn).display,
                        visibility: window.getComputedStyle(btn).visibility,
                        opacity: window.getComputedStyle(btn).opacity
                    }
                });
            }

            return info;
        });

        console.log('Th√¥ng tin t·∫•t c·∫£ button:', JSON.stringify(buttonInfo, null, 2));
    }

    // Method ƒë·ªÉ detect v√† handle l·ªói "S·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp"
    async handlePhoneMismatchError() {
        console.log('ƒêang ki·ªÉm tra l·ªói "S·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp"...');

        try {
            // Ki·ªÉm tra xem c√≥ th√¥ng b√°o l·ªói v·ªÅ s·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp kh√¥ng
            const hasMismatchError = await this.page.evaluate(() => {
                const errorTexts = [
                    'S·ªë ƒëi·ªán tho·∫°i b·∫°n ƒëang mu·ªën x√°c minh kh√¥ng kh·ªõp v·ªõi s·ªë ƒëi·ªán tho·∫°i b·∫°n g·ª≠i tr∆∞·ªõc ƒë√≥',
                    'Phone number mismatch',
                    'S·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp',
                    'Phone verification failed'
                ];

                const allText = document.body.innerText;
                return errorTexts.some(text => allText.includes(text));
            });

            if (hasMismatchError) {
                console.log('‚ùå Ph√°t hi·ªán l·ªói "S·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp"');

                // Th√™m delay ƒë·ªÉ ƒë·∫£m b·∫£o trang ƒë√£ load xong
                await randomDelay(2000, 4000);

                // Th·ª≠ t√¨m v√† click button "H·ªßy" ho·∫∑c "Th·ª≠ l·∫°i"
                const cancelSuccess = await this.clickCancelButton();
                if (cancelSuccess) {
                    console.log('‚úÖ ƒê√£ h·ªßy v√† s·∫µn s√†ng th·ª≠ l·∫°i v·ªõi s·ªë m·ªõi');
                    return true;
                }

                // N·∫øu kh√¥ng click ƒë∆∞·ª£c button H·ªßy, th·ª≠ refresh trang
                console.log('Kh√¥ng th·ªÉ click button H·ªßy, th·ª≠ refresh trang...');
                await this.page.reload();
                await randomDelay(3000, 5000);
                return true;
            }

            return false;

        } catch (error) {
            console.error('L·ªói khi ki·ªÉm tra l·ªói s·ªë ƒëi·ªán tho·∫°i:', error.message);
            return false;
        }
    }

    // Method c·∫£i thi·ªán ƒë·ªÉ ch·ªù v√† x·ª≠ l√Ω OTP
    async waitForOtpAndFill() {
        console.log('ƒêang ch·ªù v√† ƒëi·ªÅn OTP...');
        try {
            console.log(`üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω OTP v·ªõi requestId: ${this.requestId}`);

            // Ki·ªÉm tra l·ªói s·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp
            const hasMismatchError = await this.handlePhoneMismatchError();
            if (hasMismatchError) {
                console.log('‚ùå Ph√°t hi·ªán l·ªói s·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp');
                return false;
            }

            // Ch·ªù input OTP xu·∫•t hi·ªán
            const otpInput = await this.page.waitForSelector('input[placeholder*="m√£ x√°c minh"], input[placeholder*="OTP"], input[maxlength="6"][type="text"]', {
                timeout: 15000,
                visible: true
            });

            if (!otpInput) {
                console.log('Kh√¥ng t√¨m th·∫•y input OTP, c√≥ th·ªÉ kh√¥ng c·∫ßn OTP');
                return true;
            }

            console.log('‚úÖ T√¨m th·∫•y input OTP');

            // Ch·ªù v√† l·∫•y OTP t·ª´ Viotp
            console.log(`ƒêang ch·ªù OTP t·ª´ Viotp cho requestId: ${this.requestId}...`);
            let otpData = null;
            let attempts = 0;
            const maxAttempts = 15;

            while (!otpData && attempts < maxAttempts) {
                try {
                    await randomDelay(3000, 5000);
                    if (this.requestId) {
                        console.log(`Th·ª≠ l·∫•y OTP v·ªõi requestId: ${this.requestId}`);
                        otpData = await this.viotpService.getOtpByRequestId(this.requestId);
                        console.log('K·∫øt qu·∫£ OTP:', otpData);
                    } else {
                        console.log('‚ùå Kh√¥ng c√≥ requestId ƒë·ªÉ l·∫•y OTP');
                        break;
                    }
                    attempts++;

                    if (!otpData) {
                        console.log(`L·∫ßn th·ª≠ ${attempts}/${maxAttempts}: Ch∆∞a c√≥ OTP, ch·ªù th√™m...`);
                    }
                } catch (error) {
                    console.log(`L·∫ßn th·ª≠ ${attempts}/${maxAttempts}: L·ªói khi l·∫•y OTP: ${error.message}`);
                    attempts++;
                }
            }

            if (otpData && otpData.code) {
                console.log(`‚úÖ ƒê√£ nh·∫≠n OTP: ${otpData.code}`);

                // Nh·∫≠p OTP
                console.log('ƒêang nh·∫≠p OTP...');
                await otpInput.click();
                await randomDelay(1000, 2000);
                await otpInput.evaluate(el => el.value = '');
                await randomDelay(1000, 2000);

                // Nh·∫≠p OTP t·ª´ng k√Ω t·ª±
                for (let i = 0; i < otpData.code.length; i++) {
                    await otpInput.type(otpData.code[i], { delay: 0 });
                    await randomDelay(200, 500);
                }

                console.log(`‚úÖ ƒê√£ ƒëi·ªÅn OTP: ${otpData.code}`);
                await randomDelay(2000, 3000);

                // Click button X√°c nh·∫≠n
                const confirmSuccess = await this.clickConfirmOtpButton();

                if (confirmSuccess) {
                    console.log('‚úÖ OTP ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!');
                    // Ti·∫øp t·ª•c x·ª≠ l√Ω billing info
                    await randomDelay(2000, 3000);

                    this.bcType = await this.billingService.handleBillingInfo();
                    console.log(`‚úÖ Ho√†n th√†nh quy tr√¨nh v·ªõi BC lo·∫°i: ${this.bcType}`);
                    return true;
                } else {
                    console.log('‚ùå Kh√¥ng th·ªÉ click button X√°c nh·∫≠n');
                    return false;
                }
            } else {
                console.log('‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c OTP sau th·ªùi gian ch·ªù');
                return false;
            }
        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω OTP:', error.message);
            return false;
        }
    }

    // Th√™m method m·ªõi ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i button tr∆∞·ªõc khi click
    async checkButtonState(buttonText) {
        try {
            const buttonInfo = await this.page.evaluate((text) => {
                const buttons = document.querySelectorAll('button');
                for (const btn of buttons) {
                    if (btn.textContent.trim() === text) {
                        return {
                            found: true,
                            disabled: btn.disabled,
                            visible: btn.offsetParent !== null,
                            className: btn.className,
                            text: btn.textContent.trim()
                        };
                    }
                }
                return { found: false };
            }, buttonText);

            if (buttonInfo.found) {
                console.log(`Button "${buttonText}": disabled=${buttonInfo.disabled}, visible=${buttonInfo.visible}`);
                return buttonInfo;
            }
            return null;
        } catch (error) {
            console.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i button:', error.message);
            return null;
        }
    }

    // Th√™m method m·ªõi ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i form ho√†n ch·ªânh
    async checkFormValidationState() {
        console.log('ƒêang ki·ªÉm tra tr·∫°ng th√°i validation c·ªßa form...');

        try {
            const formState = await this.page.evaluate(() => {
                // Ki·ªÉm tra t·∫•t c·∫£ input fields
                const inputs = document.querySelectorAll('input, select');
                const inputStates = Array.from(inputs).map(input => ({
                    type: input.type,
                    placeholder: input.placeholder,
                    value: input.value,
                    hasValue: input.value && input.value.trim().length > 0,
                    hasError: input.classList.contains('error') || input.closest('.error'),
                    hasSuccess: input.classList.contains('success') || input.closest('.success'),
                    disabled: input.disabled,
                    required: input.required
                }));

                // Ki·ªÉm tra error messages
                const errorElements = document.querySelectorAll('.error, .validate_error, [class*="error"]');
                const errorMessages = Array.from(errorElements).map(el => el.textContent.trim());

                // Ki·ªÉm tra success messages
                const successElements = document.querySelectorAll('.success, [class*="success"]');
                const successMessages = Array.from(successElements).map(el => el.textContent.trim());

                // Ki·ªÉm tra button states
                const buttons = document.querySelectorAll('button');
                const buttonStates = Array.from(buttons).map(btn => ({
                    text: btn.textContent.trim(),
                    disabled: btn.disabled,
                    visible: btn.offsetParent !== null,
                    className: btn.className
                }));

                return {
                    inputs: inputStates,
                    errors: errorMessages,
                    successes: successMessages,
                    buttons: buttonStates,
                    hasErrors: errorMessages.length > 0,
                    hasSuccesses: successMessages.length > 0
                };
            });

            console.log('üìã Tr·∫°ng th√°i form:');
            console.log('- Inputs:', formState.inputs.length);
            console.log('- Errors:', formState.errors);
            console.log('- Successes:', formState.successes);
            console.log('- Buttons:', formState.buttons.length);

            // Ki·ªÉm tra xem c√≥ l·ªói n√†o kh√¥ng
            if (formState.hasErrors) {
                console.log('‚ùå Form c√≥ l·ªói validation:', formState.errors);
                return false;
            }

            // Ki·ªÉm tra xem t·∫•t c·∫£ required fields ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn ch∆∞a
            const requiredInputs = formState.inputs.filter(input => input.required);
            const filledRequiredInputs = requiredInputs.filter(input => input.hasValue);

            if (requiredInputs.length > 0 && filledRequiredInputs.length !== requiredInputs.length) {
                console.log('‚ùå Ch∆∞a ƒëi·ªÅn ƒë·∫ßy ƒë·ªß required fields');
                return false;
            }

            // Ki·ªÉm tra button G·ª≠i c√≥ s·∫µn s√†ng kh√¥ng
            const sendButton = formState.buttons.find(btn => btn.text.includes('G·ª≠i'));
            if (sendButton && sendButton.disabled) {
                console.log('‚ùå Button G·ª≠i ƒëang b·ªã disabled');
                return false;
            }

            console.log('‚úÖ Form validation ho√†n t·∫•t');
            return true;

        } catch (error) {
            console.error('L·ªói khi ki·ªÉm tra form validation:', error.message);
            return false;
        }
    }

    // Th√™m method ƒë·ªÉ ƒë·ª£i form validation ho√†n t·∫•t
    async waitForFormValidation() {
        console.log('ƒêang ƒë·ª£i form validation ho√†n t·∫•t...');

        let attempts = 0;
        const maxAttempts = 10;

        while (attempts < maxAttempts) {
            attempts++;

            const isValid = await this.checkFormValidationState();
            if (isValid) {
                console.log('‚úÖ Form validation ƒë√£ ho√†n t·∫•t');
                return true;
            }

            console.log(`L·∫ßn th·ª≠ ${attempts}/${maxAttempts}: Form ch∆∞a valid, ch·ªù th√™m...`);
            await randomDelay(2000, 4000);
        }

        console.log('‚ùå Form validation kh√¥ng ho√†n t·∫•t sau th·ªùi gian ch·ªù');
        return false;
    }

    // Method chuy·ªÉn ƒë·∫øn trang danh s√°ch accounts
    async navigateToAccountsList() {
        console.log('ƒêang ch·ªù trang load ho√†n t·∫•t...');

        // Ch·ªù 10-15 gi√¢y ƒë·ªÉ trang load h·∫øt
        await randomDelay(10000, 15000);

        console.log('ƒêang chuy·ªÉn ƒë·∫øn trang danh s√°ch accounts...');

        try {
            // L·∫•y org_id t·ª´ URL hi·ªán t·∫°i
            const currentUrl = await this.page.url();
            const urlMatch = currentUrl.match(/org_id=(\d+)/);

            if (!urlMatch) {
                throw new Error('Kh√¥ng t√¨m th·∫•y org_id trong URL hi·ªán t·∫°i: ' + currentUrl);
            }

            const orgId = urlMatch[1];
            console.log('T√¨m th·∫•y org_id cho accounts list:', orgId);

            // T·∫°o URL m·ªõi v·ªõi c√°c tham s·ªë c·∫ßn thi·∫øt
            const accountsListUrl = `https://business.tiktok.com/manage/accounts/adv?org_id=${orgId}&detail_adv=0&filters=3,1,2,4,5&selectAccountType=1`;
            console.log('Chuy·ªÉn ƒë·∫øn URL accounts list:', accountsListUrl);

            // Chuy·ªÉn ƒë·∫øn trang accounts list
            await this.page.goto(accountsListUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            console.log('‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn trang danh s√°ch accounts th√†nh c√¥ng');

            // Ch·ªù trang load xong
            await randomDelay(3000, 5000);

            // Tr·∫£ v·ªÅ org_id ƒë·ªÉ s·ª≠ d·ª•ng trong file m·ªõi
            return orgId;

        } catch (error) {
            console.error('L·ªói khi chuy·ªÉn ƒë·∫øn trang danh s√°ch accounts:', error.message);
            throw error;
        }
    }

    // Method x·ª≠ l√Ω trang danh s√°ch accounts v·ªõi file m·ªõi
    async handleAccountsList(orgId) {
        console.log('ƒêang kh·ªüi t·∫°o AccountsListHandler...');

        try {
            // T·∫°o instance c·ªßa AccountsListHandler
            const accountsListHandler = new AccountsListHandler(this.page, this.userConfig);

            // Th·ª±c thi logic x·ª≠ l√Ω accounts list
            await accountsListHandler.execute();

            console.log('‚úÖ ƒê√£ ho√†n th√†nh x·ª≠ l√Ω accounts list');

        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω accounts list:', error.message);
            throw error;
        }
    }

    // Helper method: Ki·ªÉm tra URL c√≥ ph·∫£i survey kh√¥ng
    isSurveyUrl(url) {
        // Ch·ªâ check ph·∫ßn ƒë·∫ßu c·ªë ƒë·ªãnh, params sau s·∫Ω thay ƒë·ªïi
        return url.includes('web-sg.tiktok.com/survey');
    }

    // Method m·ªõi: X·ª≠ l√Ω survey redirect
    async handleSurveyRedirect() {
        console.log('üîç Ki·ªÉm tra survey redirect...');

        try {
            // Monitor URL changes v√† new tabs
            const checkRedirect = async() => {
                const currentUrl = await this.page.url();
                console.log('Current URL:', currentUrl);

                // Ki·ªÉm tra redirect sang survey  
                if (this.isSurveyUrl(currentUrl)) {
                    console.log('üö® Ph√°t hi·ªán redirect sang survey URL:', currentUrl);

                    // Quay v·ªÅ trang tr∆∞·ªõc ƒë√≥
                    await this.page.goBack();
                    await randomDelay(2000, 3000);

                    console.log('‚úÖ ƒê√£ quay v·ªÅ trang tr∆∞·ªõc survey');
                    return true;
                }

                return false;
            };

            // Ki·ªÉm tra redirect trong 10 gi√¢y
            let redirectHandled = false;
            let attempts = 0;
            const maxAttempts = 20; // 20 x 500ms = 10 seconds

            while (!redirectHandled && attempts < maxAttempts) {
                redirectHandled = await checkRedirect();
                if (!redirectHandled) {
                    await randomDelay(500, 500);
                    attempts++;
                }
            }

            return redirectHandled;

        } catch (error) {
            console.error('‚ùå L·ªói khi x·ª≠ l√Ω survey redirect:', error.message);
            return false;
        }
    }

    // Method m·ªõi: Continuous monitoring cho survey redirect
    async continuousMonitorSurvey() {
        console.log('üîÑ B·∫Øt ƒë·∫ßu monitor survey redirect li√™n t·ª•c...');

        // L∆∞u URL hi·ªán t·∫°i ƒë·ªÉ c√≥ th·ªÉ quay v·ªÅ
        let lastValidUrl = await this.page.url();

        const monitorInterval = setInterval(async() => {
            try {
                const currentUrl = await this.page.url();

                // C·∫≠p nh·∫≠t lastValidUrl n·∫øu kh√¥ng ph·∫£i survey
                if (!this.isSurveyUrl(currentUrl) && currentUrl.includes('business.tiktok.com')) {
                    lastValidUrl = currentUrl;
                }

                // Ki·ªÉm tra survey redirect tr√™n tab hi·ªán t·∫°i
                if (this.isSurveyUrl(currentUrl)) {
                    console.log('üö® Ph√°t hi·ªán survey redirect (monitor):', currentUrl);
                    console.log('üìã Survey URL detected:', currentUrl.substring(0, 100) + '...');

                    try {
                        // Th·ª≠ quay v·ªÅ trang tr∆∞·ªõc tr∆∞·ªõc
                        await this.page.goBack();
                        await randomDelay(1000, 2000);

                        const backUrl = await this.page.url();
                        console.log('‚úÖ ƒê√£ go back, URL hi·ªán t·∫°i:', backUrl);

                        // N·∫øu v·∫´n ·ªü survey page, navigate v·ªÅ lastValidUrl
                        if (this.isSurveyUrl(backUrl)) {
                            console.log('‚ö†Ô∏è V·∫´n ·ªü survey page, navigate v·ªÅ URL h·ª£p l·ªá:', lastValidUrl);
                            await this.page.goto(lastValidUrl, {
                                waitUntil: 'networkidle2',
                                timeout: 15000
                            });
                            await randomDelay(2000, 3000);
                        }
                    } catch (navError) {
                        console.log('‚ùå L·ªói navigation, th·ª≠ fallback:', navError.message);

                        // Fallback: navigate v·ªÅ business center
                        const businessUrl = 'https://business.tiktok.com/';
                        await this.page.goto(businessUrl, {
                            waitUntil: 'networkidle2',
                            timeout: 15000
                        });
                        await randomDelay(2000, 3000);
                    }
                }

                // Ki·ªÉm tra v√† ƒë√≥ng new tabs c√≥ survey
                const browser = this.page.browser();
                const pages = await browser.pages();

                for (const page of pages) {
                    if (page !== this.page) {
                        try {
                            const pageUrl = await page.url();
                            if (this.isSurveyUrl(pageUrl)) {
                                console.log('üö® Ph√°t hi·ªán survey trong tab m·ªõi:', pageUrl.substring(0, 80) + '...');
                                await page.close();
                                console.log('‚úÖ ƒê√£ ƒë√≥ng tab survey');
                            }
                        } catch (error) {
                            // Ignore error khi check/close tabs
                            console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω tab:', error.message);
                        }
                    }
                }

                // Monitor popup/modal c√≥ survey kh√¥ng
                try {
                    const hasSurveyModal = await this.page.evaluate(() => {
                        // T√¨m modal/popup c√≥ ch·ª©a survey link
                        const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
                        for (const modal of modals) {
                            const modalContent = modal.textContent || modal.innerHTML;
                            if (modalContent.includes('web-sg.tiktok.com/survey')) {
                                return true;
                            }
                        }
                        return false;
                    });

                    if (hasSurveyModal) {
                        console.log('üö® Ph√°t hi·ªán survey modal, ƒë√≥ng modal...');

                        // Th·ª≠ ƒë√≥ng modal b·∫±ng ESC ho·∫∑c close button
                        await this.page.keyboard.press('Escape');
                        await randomDelay(500, 1000);

                        // Ho·∫∑c click button ƒë√≥ng n·∫øu c√≥
                        await this.page.evaluate(() => {
                            const closeButtons = document.querySelectorAll('[aria-label="close"], [aria-label="Close"], .close, .modal-close, [title="Close"]');
                            for (const btn of closeButtons) {
                                if (btn.offsetParent !== null) {
                                    btn.click();
                                    break;
                                }
                            }
                        });

                        console.log('‚úÖ ƒê√£ ƒë√≥ng survey modal');
                    }
                } catch (modalError) {
                    // Ignore modal handling errors
                }

            } catch (error) {
                console.log('‚ö†Ô∏è L·ªói monitor survey:', error.message);
            }
        }, 800); // Check m·ªói 0.8 gi√¢y ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n

        // L∆∞u interval ƒë·ªÉ c√≥ th·ªÉ clear later
        this.surveyMonitorInterval = monitorInterval;

        console.log('‚úÖ Survey monitoring ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông (check m·ªói 0.8s)');
        return monitorInterval;
    }

    // Method ƒë·ªÉ stop monitoring
    stopSurveyMonitoring() {
        if (this.surveyMonitorInterval) {
            clearInterval(this.surveyMonitorInterval);
            this.surveyMonitorInterval = null;
            console.log('‚èπÔ∏è ƒê√£ d·ª´ng survey monitoring');
        }
    }

    // Method m·ªõi: Prevent survey links (Enhanced)
    async preventSurveyLinks() {
        console.log('üîí ƒêang setup prevent survey links n√¢ng cao...');

        try {
            await this.page.evaluate(() => {
                // Override window.open ƒë·ªÉ block survey
                const originalOpen = window.open;
                window.open = function(url, target, features) {
                    const isSurvey = url && url.includes('web-sg.tiktok.com/survey');

                    if (isSurvey) {
                        console.log('üö® Blocked survey popup via window.open:', url);
                        return null;
                    }

                    return originalOpen.call(window, url, target, features);
                };

                // Override location change methods
                const originalAssign = window.location.assign;
                const originalReplace = window.location.replace;

                window.location.assign = function(url) {
                    if (url && url.includes('web-sg.tiktok.com/survey')) {
                        console.log('üö® Blocked survey via location.assign:', url);
                        return;
                    }
                    return originalAssign.call(window.location, url);
                };

                window.location.replace = function(url) {
                    if (url && url.includes('web-sg.tiktok.com/survey')) {
                        console.log('üö® Blocked survey via location.replace:', url);
                        return;
                    }
                    return originalReplace.call(window.location, url);
                };

                // Block survey links clicks (enhanced)
                document.addEventListener('click', function(event) {
                    const target = event.target;

                    // Check for direct href
                    let href = target.href;

                    // Check parent elements for href
                    if (!href) {
                        const parentA = target.closest('a');
                        if (parentA) href = parentA.href;
                    }

                    // Check for data attributes that might contain survey links
                    const dataUrl = target.getAttribute('data-url') || target.getAttribute('data-href');
                    if (dataUrl && dataUrl.includes('web-sg.tiktok.com/survey')) {
                        console.log('üö® Blocked survey link via data attribute:', dataUrl);
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }

                    if (href && href.includes('web-sg.tiktok.com/survey')) {
                        console.log('üö® Blocked survey link click:', href);
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                }, true);

                // Monitor for dynamically added survey links
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1) { // Element node
                                // Check the node itself
                                if (node.href && node.href.includes('web-sg.tiktok.com/survey')) {
                                    console.log('üö® Removed dynamically added survey link:', node.href);
                                    node.remove();
                                }

                                // Check children
                                const surveyLinks = node.querySelectorAll && node.querySelectorAll('a[href*="web-sg.tiktok.com/survey"]');
                                if (surveyLinks) {
                                    surveyLinks.forEach(function(link) {
                                        console.log('üö® Removed dynamically added survey link (child):', link.href);
                                        link.remove();
                                    });
                                }
                            }
                        });
                    });
                });

                observer.observe(document, {
                    childList: true,
                    subtree: true
                });

                // Store observer for cleanup
                window.__surveyLinkObserver = observer;

                console.log('‚úÖ Enhanced survey prevention setup complete');
            });

            // Also setup page-level navigation blocking
            await this.page.evaluateOnNewDocument(() => {
                // This runs on every page load/navigation
                const originalOpen = window.open;
                window.open = function(url, target, features) {
                    if (url && url.includes('web-sg.tiktok.com/survey')) {
                        console.log('üö® Blocked survey popup on new document:', url);
                        return null;
                    }
                    return originalOpen.call(window, url, target, features);
                };
            });

            console.log('‚úÖ ƒê√£ setup prevent survey links n√¢ng cao');

        } catch (error) {
            console.error('‚ùå L·ªói setup prevent survey links:', error.message);
        }
    }

    async execute() {
        console.log('=== B·∫ÆT ƒê·∫¶U POST SETUP ===');

        try {
            // 1. Ch·ªù v√† x·ª≠ l√Ω two-step verification
            await this.waitForTwoStepVerification();
            await this.skipTwoStepVerification();

            // √âp chuy·ªÉn giao di·ªán sang ti·∫øng Vi·ªát sau khi xong 2FA
            await this.page.evaluate(() => {
                // Set localStorage
                localStorage.setItem('selected_lang', 'vi');
                localStorage.setItem('__Garfish__react__business_suite_lang', 'vi-VN');
                // Set cookie
                document.cookie = 'lang_type=vi; path=/; domain=' + location.hostname + ';';
                // Reload
                location.reload();
            });
            // Ch·ªù reload ho√†n t·∫•t
            await this.page.waitForFunction(() => document.readyState === 'complete', { timeout: 20000 });
            await randomDelay(2000, 3000);

            // 2. Chuy·ªÉn ƒë·∫øn trang Accounts
            await this.navigateToAccounts();
            await this.waitForAccountsPageLoad();

            // üõ°Ô∏è Kh·ªüi ƒë·ªông Global Survey Protection (thay th·∫ø local logic)
            console.log('üõ°Ô∏è Kh·ªüi ƒë·ªông Global Survey Protection cho PostSetup...');
            this.surveyProtection = await SurveyProtectionService.createGlobalProtection(this.page);

            // 3. ƒêi·ªÅn form th√¥ng tin
            await this.selectIndustry();

            // Ki·ªÉm tra survey redirect sau khi ch·ªçn ng√†nh
            await this.handleSurveyRedirect();
            await randomDelay(1000, 2000);

            await this.fillResponsiblePerson();
            await this.selectPhoneCountryCode();
            await this.fillPhoneNumber();

            // 4. Verify v√† g·ª≠i OTP
            console.log('üîÑ Verify s·ªë ƒëi·ªán tho·∫°i...');
            await randomDelay(2000, 3000);

            const phoneInput = await this.page.waitForSelector('input[type="tel"]', { timeout: 5000 });
            const phoneValue = await phoneInput.evaluate(el => el.value);
            console.log(`S·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i: ${phoneValue}`);

            if (!phoneValue || phoneValue.length < 9) {
                throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
            }

            console.log('‚úÖ S·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá, s·∫µn s√†ng g·ª≠i OTP');
            await randomDelay(2000, 3000);

            // 5. Click button G·ª≠i
            const sendSuccess = await this.clickSendButton();
            if (!sendSuccess) {
                throw new Error('Kh√¥ng th·ªÉ click button G·ª≠i');
            }

            // 6. Ch·ªù v√† x·ª≠ l√Ω OTP
            const otpResult = await this.waitForOtpAndFill();
            if (!otpResult) {
                console.log('‚ùå X·ª≠ l√Ω OTP th·∫•t b·∫°i, d·ª´ng quy tr√¨nh');
                this.stopSurveyMonitoring();
                return { bcProcessCompleted: false };
            }
            await randomDelay(2000, 3000);

            // 7. Chuy·ªÉn ƒë·∫øn trang danh s√°ch accounts
            const orgId = await this.navigateToAccountsList();
            await this.handleAccountsList(orgId);

            // üõ°Ô∏è D·ª´ng Global Survey Protection
            if (this.surveyProtection) {
                this.surveyProtection.stopProtection();
                this.surveyProtection = null;
            }

            console.log('=== HO√ÄN TH√ÄNH POST SETUP ===');

            return {
                bcProcessCompleted: true,
                accountType: this.userConfig.accountType || 'bc', // BC type user ch·ªçn
                billingType: this.bcType || 'Unknown', // Billing type t·ª± detect
                bcType: `${this.userConfig.accountType || 'bc'}_${this.bcType || 'Unknown'}` // Combined type
            };

        } catch (error) {
            console.error('L·ªói trong PostSetup:', error.message);

            // üõ°Ô∏è D·ª´ng Global Survey Protection khi c√≥ l·ªói
            if (this.surveyProtection) {
                this.surveyProtection.stopProtection();
                this.surveyProtection = null;
            }

            throw error;
        }
    }
}

module.exports = PostSetup;